IDENTIFICATION DIVISION.
PROGRAM-ID. VIEW.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT STUDENT-FILE-SEM1 ASSIGN TO "student_sem1.dat"
        ORGANIZATION IS LINE SEQUENTIAL.
    SELECT STUDENT-FILE-SEM2 ASSIGN TO "student_sem2.dat"
        ORGANIZATION IS LINE SEQUENTIAL.
    SELECT RANKED-RESULTS-SEM1 ASSIGN TO "ranked_results_sem1.dat"
        ORGANIZATION IS LINE SEQUENTIAL.
    SELECT RANKED-RESULTS-SEM2 ASSIGN TO "ranked_results_sem2.dat"
        ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD  STUDENT-FILE-SEM1.
01  STUDENT-RECORD-SEM1.
    05  STUDENT-ID1        PIC X(10).
    05  STUDENT-NAME1      PIC X(30).
    05  STUDENT-SUBJECTS1.
        10  MARK1-CST11101 PIC 9(3).
        10  MARK1-CST11201 PIC 9(3).
        10  MARK1-CST11401 PIC 9(3).
        10  MARK1-CST11501 PIC 9(3).
        10  MARK1-CST11601 PIC 9(3).
        10  MARK1-CST11701 PIC 9(3).

FD  STUDENT-FILE-SEM2.
01  STUDENT-RECORD-SEM2.
    05  STUDENT-ID2        PIC X(10).
    05  STUDENT-NAME2      PIC X(30).
    05  STUDENT-SUBJECTS2.
        10  MARK2-CST12101 PIC 9(3).
        10  MARK2-CST12201 PIC 9(3).
        10  MARK2-CST12401 PIC 9(3).
        10  MARK2-CST12501 PIC 9(3).
        10  MARK2-CST12601 PIC 9(3).
        10  MARK2-CST12701 PIC 9(3).
FD  RANKED-RESULTS-SEM1.
01  RANKED-RESULT-RECORD-SEM1.
    05  RR1-STUDENT-ID     PIC X(10).
    05  RR1-STUDENT-NAME   PIC X(30).
    05  RR1-SUBJECT-MARKS  OCCURS 6 TIMES PIC 9(3).
    05  RR1-TOTAL-MARKS    PIC 9(4).
    05  RR1-GRADE          PIC X.
    05  RR1-RANK           PIC 9(4).

FD  RANKED-RESULTS-SEM2.
01  RANKED-RESULT-RECORD-SEM2.
    05  RR2-STUDENT-ID     PIC X(10).
    05  RR2-STUDENT-NAME   PIC X(30).
    05  RR2-SUBJECT-MARKS  OCCURS 6 TIMES PIC 9(3).
    05  RR2-TOTAL-MARKS    PIC 9(4).
    05  RR2-GRADE          PIC X.
    05  RR2-RANK           PIC 9(4).

WORKING-STORAGE SECTION.
01 DISP-TOTAL-MARK       PIC Z(4).
01 DISP-RANK             PIC Z(4).
01 WS-CHOICE             PIC 9.
01 WS-MANAGE-CHOICE      PIC 9.
01 WS-SEMESTER           PIC 9.
01 WS-ID-SEARCH          PIC X(10).
01 WS-EOF                PIC X VALUE 'N'.
    88 END-OF-FILE       VALUE 'Y'.
    88 NOT-END-OF-FILE   VALUE 'N'.
01 WS-FOUND              PIC X VALUE 'N'.
    88 RECORD-FOUND      VALUE 'Y'.
    88 RECORD-NOT-FOUND  VALUE 'N'.

01 STUDENT-ID            PIC X(10).
01 STUDENT-NAME          PIC X(30).
01 MARKS                 OCCURS 6 TIMES PIC 999.
01 IDX                   PIC 9(4) VALUE 1.
01 IDY                   PIC 9(4) VALUE 1.
01 IDZ                   PIC 9 VALUE 1.
01 TOTAL-MARKS           PIC 9999.
01 GRADE                 PIC X.

01 DISP-MARK1            PIC Z(3).
01 DISP-MARK2            PIC Z(3).
01 DISP-MARK3            PIC Z(3).
01 DISP-MARK4            PIC Z(3).
01 DISP-MARK5            PIC Z(3).
01 DISP-MARK6            PIC Z(3).

01 WS-STUDENT-COUNT      PIC 9(4) VALUE 0.
01 WS-STUDENT-TABLE OCCURS 1 TO 1000 TIMES
                        DEPENDING ON WS-STUDENT-COUNT.
    05 WS-SORT-ID        PIC X(10).
    05 WS-SORT-NAME      PIC X(30).
    05 WS-SORT-MARKS     OCCURS 6 TIMES PIC 999.
    05 WS-SORT-TOTAL     PIC 9999.
    05 WS-SORT-GRADE     PIC X.

01 WS-TEMP-STUDENT.
    05 WS-TEMP-ID        PIC X(10).
    05 WS-TEMP-NAME      PIC X(30).
    05 WS-TEMP-MARKS     OCCURS 6 TIMES PIC 999.
    05 WS-TEMP-TOTAL     PIC 9(4).
    05 WS-TEMP-GRADE     PIC X.
LINKAGE SECTION.
01 LS-SEMESTER PIC 9.
PROCEDURE DIVISION using LS-SEMESTER.
    MOVE LS-SEMESTER TO WS-SEMESTER
    SET NOT-END-OF-FILE TO TRUE
    MOVE 0 TO WS-STUDENT-COUNT

    EVALUATE WS-SEMESTER
        WHEN 1
            PERFORM LOAD-SEM1-DATA
            PERFORM SORT-STUDENTS
            PERFORM DISPLAY-SORTED-RESULTS
            PERFORM STORE-RANKED-RESULTS-SEM1
        WHEN 2
            PERFORM LOAD-SEM2-DATA
            PERFORM SORT-STUDENTS
            PERFORM DISPLAY-SORTED-RESULTS
            PERFORM STORE-RANKED-RESULTS-SEM2
        WHEN OTHER
            DISPLAY "Invalid semester"
            EXIT PARAGRAPH
    END-EVALUATE
    EXIT PROGRAM.


LOAD-SEM1-DATA.
    OPEN INPUT STUDENT-FILE-SEM1
    PERFORM UNTIL END-OF-FILE OR WS-STUDENT-COUNT >= 1000
        READ STUDENT-FILE-SEM1 AT END SET END-OF-FILE TO TRUE END-READ
        IF NOT END-OF-FILE
            IF MARK1-CST11101 IS NUMERIC AND
               MARK1-CST11201 IS NUMERIC AND
               MARK1-CST11401 IS NUMERIC AND
               MARK1-CST11501 IS NUMERIC AND
               MARK1-CST11601 IS NUMERIC AND
               MARK1-CST11701 IS NUMERIC
               ADD 1 TO WS-STUDENT-COUNT
               IF WS-STUDENT-COUNT <= 1000
                MOVE STUDENT-ID1 TO WS-SORT-ID(WS-STUDENT-COUNT)
                MOVE STUDENT-NAME1 TO WS-SORT-NAME(WS-STUDENT-COUNT)
                MOVE MARK1-CST11101 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 1)
                MOVE MARK1-CST11201 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 2)
                MOVE MARK1-CST11401 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 3)
                MOVE MARK1-CST11501 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 4)
                MOVE MARK1-CST11601 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 5)
                MOVE MARK1-CST11701 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 6)
            COMPUTE WS-SORT-TOTAL(WS-STUDENT-COUNT) =
                MARK1-CST11101 + MARK1-CST11201 + MARK1-CST11401 +
                    MARK1-CST11501 + MARK1-CST11601 + MARK1-CST11701
            PERFORM CALCULATE-GRADE
            ELSE
                    DISPLAY "Maximum student capacity reached (1000 records)"
                    SET END-OF-FILE TO TRUE
           END-IF
        END-IF
    END-PERFORM
    CLOSE STUDENT-FILE-SEM1.

LOAD-SEM2-DATA.
    OPEN INPUT STUDENT-FILE-SEM2
    PERFORM UNTIL END-OF-FILE OR WS-STUDENT-COUNT >= 1000
        READ STUDENT-FILE-SEM2 AT END SET END-OF-FILE TO TRUE END-READ
        IF NOT END-OF-FILE
            IF MARK2-CST12101 IS NUMERIC AND
               MARK2-CST12201 IS NUMERIC AND
               MARK2-CST12401 IS NUMERIC AND
               MARK2-CST12501 IS NUMERIC AND
               MARK2-CST12601 IS NUMERIC AND
               MARK2-CST12701 IS NUMERIC
                ADD 1 TO WS-STUDENT-COUNT
                IF WS-STUDENT-COUNT <= 1000
                MOVE STUDENT-ID2 TO WS-SORT-ID(WS-STUDENT-COUNT)
                MOVE STUDENT-NAME2 TO WS-SORT-NAME(WS-STUDENT-COUNT)
                MOVE MARK2-CST12101 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 1)
                MOVE MARK2-CST12201 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 2)
                MOVE MARK2-CST12401 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 3)
                MOVE MARK2-CST12501 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 4)
                MOVE MARK2-CST12601 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 5)
                MOVE MARK2-CST12701 TO WS-SORT-MARKS(WS-STUDENT-COUNT, 6)
            COMPUTE WS-SORT-TOTAL(WS-STUDENT-COUNT) =
                MARK2-CST12101 + MARK2-CST12201 + MARK2-CST12401 +
                    MARK2-CST12501 + MARK2-CST12601 + MARK2-CST12701
            PERFORM CALCULATE-GRADE
            ELSE
                    DISPLAY "Maximum student capacity reached (1000 records)"
                    SET END-OF-FILE TO TRUE
           END-IF
        END-IF
    END-PERFORM
    CLOSE STUDENT-FILE-SEM2.

CALCULATE-GRADE.
    If WS-SEMESTER=1
  IF MARK1-CST11101 < 40 OR
   MARK1-CST11201 < 40 OR
   MARK1-CST11401 < 40 OR
   MARK1-CST11501 < 40 OR
   MARK1-CST11601 < 40 OR
   MARK1-CST11701 < 40
   MOVE "F" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
  ELSE
    EVALUATE TRUE
        WHEN WS-SORT-TOTAL(WS-STUDENT-COUNT) >= 450
            MOVE "A" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
        WHEN WS-SORT-TOTAL(WS-STUDENT-COUNT) >= 400
            MOVE "B" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
        WHEN WS-SORT-TOTAL(WS-STUDENT-COUNT) >= 300
            MOVE "C" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
        WHEN OTHER
            MOVE "F" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
    END-EVALUATE
  END-IF
  ELSE
      IF MARK2-CST12101 < 40 OR
        MARK2-CST12201 < 40 OR
        MARK2-CST12401 < 40 OR
        MARK2-CST12501 < 40 OR
        MARK2-CST12601 < 40 OR
        MARK2-CST12701 < 40
        MOVE "F" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
  ELSE
    EVALUATE TRUE
        WHEN WS-SORT-TOTAL(WS-STUDENT-COUNT) >= 450
            MOVE "A" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
        WHEN WS-SORT-TOTAL(WS-STUDENT-COUNT) >= 400
            MOVE "B" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
        WHEN WS-SORT-TOTAL(WS-STUDENT-COUNT) >= 300
            MOVE "C" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
        WHEN OTHER
            MOVE "F" TO WS-SORT-GRADE(WS-STUDENT-COUNT)
    END-EVALUATE
  END-IF
 END-IF.


SORT-STUDENTS.
    IF WS-STUDENT-COUNT > 1
       IF WS-SORT-GRADE(IDX) NOT = "F"

        PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX >= WS-STUDENT-COUNT
            COMPUTE IDY = IDX + 1
            PERFORM VARYING IDY FROM IDY BY 1 UNTIL IDY > WS-STUDENT-COUNT
             IF WS-SORT-GRADE(IDX) = "F" AND WS-SORT-GRADE(IDY) NOT = "F"

                PERFORM SWAP-STUDENTS

            ELSE IF WS-SORT-GRADE(IDX) = "F" AND WS-SORT-GRADE(IDY) = "F"

                IF WS-SORT-TOTAL(IDX) < WS-SORT-TOTAL(IDY)
                    PERFORM SWAP-STUDENTS
                END-IF

            ELSE IF WS-SORT-GRADE(IDX) NOT = "F" AND WS-SORT-GRADE(IDY) NOT = "F"

                IF WS-SORT-TOTAL(IDX) < WS-SORT-TOTAL(IDY)
                    PERFORM SWAP-STUDENTS
                END-IF

            END-IF
        END-PERFORM
        END-PERFORM
       END-IF

    END-IF.

SWAP-STUDENTS.
    MOVE WS-SORT-ID(IDX) TO WS-TEMP-ID
    MOVE WS-SORT-ID(IDY) TO WS-SORT-ID(IDX)
    MOVE WS-TEMP-ID TO WS-SORT-ID(IDY)

    MOVE WS-SORT-NAME(IDX) TO WS-TEMP-NAME
    MOVE WS-SORT-NAME(IDY) TO WS-SORT-NAME(IDX)
    MOVE WS-TEMP-NAME TO WS-SORT-NAME(IDY)

    MOVE WS-SORT-TOTAL(IDX) TO WS-TEMP-TOTAL
    MOVE WS-SORT-TOTAL(IDY) TO WS-SORT-TOTAL(IDX)
    MOVE WS-TEMP-TOTAL TO WS-SORT-TOTAL(IDY)

    MOVE WS-SORT-GRADE(IDX) TO WS-TEMP-GRADE
    MOVE WS-SORT-GRADE(IDY) TO WS-SORT-GRADE(IDX)
    MOVE WS-TEMP-GRADE TO WS-SORT-GRADE(IDY)

    PERFORM VARYING IDZ FROM 1 BY 1 UNTIL IDZ > 6
        MOVE WS-SORT-MARKS(IDX, IDZ) TO WS-TEMP-MARKS(IDZ)
        MOVE WS-SORT-MARKS(IDY, IDZ) TO WS-SORT-MARKS(IDX, IDZ)
        MOVE WS-TEMP-MARKS(IDZ) TO WS-SORT-MARKS(IDY, IDZ)
    END-PERFORM.

DISPLAY-SORTED-RESULTS.
    IF WS-SEMESTER = 1
        DISPLAY "SEMESTER I"
        DISPLAY "==============================================================================================="
        DISPLAY "StudentID   Name                            1101 1201 1401 1501 1601 1701  Total  Grade  Rank "
        DISPLAY "==============================================================================================="
    ELSE
        DISPLAY "SEMESTER II"
        DISPLAY "==============================================================================================="
        DISPLAY "StudentID   Name                            2101 2201 2401 2501 2601 2701  Total  Grade  Rank "
        DISPLAY "==============================================================================================="
    END-IF
    PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > WS-STUDENT-COUNT OR IDX > 1000
    IF IDX <= 1000 AND IDX <= WS-STUDENT-COUNT
        MOVE WS-SORT-MARKS(IDX, 1) TO DISP-MARK1
        MOVE WS-SORT-MARKS(IDX, 2) TO DISP-MARK2
        MOVE WS-SORT-MARKS(IDX, 3) TO DISP-MARK3
        MOVE WS-SORT-MARKS(IDX, 4) TO DISP-MARK4
        MOVE WS-SORT-MARKS(IDX, 5) TO DISP-MARK5
        MOVE WS-SORT-MARKS(IDX, 6) TO DISP-MARK6
        MOVE WS-SORT-TOTAL(IDX) TO DISP-TOTAL-MARK
        MOVE IDX TO DISP-RANK

        DISPLAY WS-SORT-ID(IDX) "  " WS-SORT-NAME(IDX) "  "
            DISP-MARK1 "  " DISP-MARK2 "  " DISP-MARK3 "  "
            DISP-MARK4 "  " DISP-MARK5 "  " DISP-MARK6
            "   " DISP-TOTAL-MARK "     " WS-SORT-GRADE(IDX) "   " DISP-RANK
   ELSE
       EXIT PERFORM
       END-IF
   END-PERFORM.
       IF WS-SEMESTER =1
           DISPLAY "SUBJECT CODE EXPLANATION (SEMESTER I)"
                           DISPLAY "11101 - Basic Data Structures"
                           DISPLAY "11201 - Calculus I"
                           DISPLAY "11401 - Digital Fundamentals of Computer System"
                           DISPLAY "11501 - English Language Proficiency I"
                           DISPLAY "11601 - Myanmar Literature"
                           DISPLAY "11701 - Physics (Mechanics)"
      ELSE
          DISPLAY "SUBJECT CODE EXPLANATION (SEMESTER II)"
                           DISPLAY "12102 - Programming in C++"
                           DISPLAY "12201 - Calculus II"
                           DISPLAY "12301 - Web Technology"
                           DISPLAY "12502 - English Language Proficiency II"
                           DISPLAY "12601 - Myanmar Literature"
                           DISPLAY "12702 - Physics (Electromagnetism)"
    END-IF.
STORE-RANKED-RESULTS-SEM1.
    OPEN OUTPUT RANKED-RESULTS-SEM1
    PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > WS-STUDENT-COUNT
        MOVE WS-SORT-ID(IDX) TO RR1-STUDENT-ID
        MOVE WS-SORT-NAME(IDX) TO RR1-STUDENT-NAME
        PERFORM VARYING IDZ FROM 1 BY 1 UNTIL IDZ > 6
            MOVE WS-SORT-MARKS(IDX, IDZ) TO RR1-SUBJECT-MARKS(IDZ)
        END-PERFORM
        MOVE WS-SORT-TOTAL(IDX) TO RR1-TOTAL-MARKS
        MOVE WS-SORT-GRADE(IDX) TO RR1-GRADE
        MOVE IDX TO RR1-RANK
        WRITE RANKED-RESULT-RECORD-SEM1
    END-PERFORM
    CLOSE RANKED-RESULTS-SEM1
    DISPLAY "Ranked results for Semester 1 saved to ranked_results_sem1.dat".

STORE-RANKED-RESULTS-SEM2.
    OPEN OUTPUT RANKED-RESULTS-SEM2
    PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > WS-STUDENT-COUNT
        MOVE WS-SORT-ID(IDX) TO RR2-STUDENT-ID
        MOVE WS-SORT-NAME(IDX) TO RR2-STUDENT-NAME
        PERFORM VARYING IDZ FROM 1 BY 1 UNTIL IDZ > 6
            MOVE WS-SORT-MARKS(IDX, IDZ) TO RR2-SUBJECT-MARKS(IDZ)
        END-PERFORM
        MOVE WS-SORT-TOTAL(IDX) TO RR2-TOTAL-MARKS
        MOVE WS-SORT-GRADE(IDX) TO RR2-GRADE
        MOVE IDX TO RR2-RANK
        WRITE RANKED-RESULT-RECORD-SEM2
    END-PERFORM
    CLOSE RANKED-RESULTS-SEM2
    DISPLAY "Ranked results for Semester 2 saved to ranked_results_sem2.dat".
